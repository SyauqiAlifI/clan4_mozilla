*,
*:after,
*:before {
	box-sizing: border-box;
}

:root {
	--font-size: clamp(2rem, 8vmin + 1rem, 4rem);
	--line: color-mix(in lch, canvasText 15%, transparent);
	--base: 0.4;
	--accent: #00b61b;
	--header-height: 100vh;
	--overlay: color-mix(in lch, canvas 70%, transparent);
	color-scheme: dark only;
}

:root[data-theme='light'] {
	--base: 0.3;
	--line: color-mix(in lch, canvasText 35%, transparent);
	--overlay: color-mix(in lch, canvas 70%, transparent);
	color-scheme: light only;
}

html:not(:focus-within) {
	scroll-behavior: smooth;
}

#body-landing {
	min-height: 100vh;
	font-family: 'SF Pro Text', 'SF Pro Icons', 'AOS Icons', 'Helvetica Neue',
		Helvetica, Arial, sans-serif, system-ui;
	background: canvas;
}

/* body::before {
	--size: 60px;
	content: '';
	height: 100vh;
	width: 100vw;
	position: fixed;
	background: url('/lines-abstract.svg');
	top: 0;
	transform-style: flat;
	pointer-events: none;
  background-size: cover;
  background-position: center;
  object-fit: cover;
  object-position: center;
	z-index: -1;
} */

/* :is(h1, h2) {
	font-size: clamp(2rem, 3vw + 1rem, 6rem);
} */

[href='#read'] {
	position: absolute;
	bottom: 2rem;
	left: 50%;
	translate: -50% 0;
	width: 48px;
	aspect-ratio: 1;
	display: grid;
	place-items: center;
	color: canvasText;
}

[href='#read'] svg {
	width: 75%;
}

.sr-only {
	position: absolute;
	width: 1px;
	height: 1px;
	padding: 0;
	margin: -1px;
	overflow: hidden;
	clip: rect(0, 0, 0, 0);
	white-space: nowrap;
	border-width: 0;
}

[data-split] {
	font-size: var(--font-size);
	font-weight: 600;
}

#body-landing header {
	min-height: var(--header-height);
	display: grid;
	place-items: center;
	position: relative;
	transform-origin: 50% 0%;
}

header#header-landing h1 {
	display: flex !important;
	flex-direction: column !important;
	justify-content: center !important;
	text-align: center !important;
}

/* h1 > span:first-of-type {
	font-size: 0.35em;
	color: var(--accent);
	text-transform: uppercase;
} */

header#header-landing > section {
	position: relative;
	top: 0;
	min-height: var(--header-height);
	width: 100%;
	translate: 0 -100%;
	display: grid;
	align-items: end;
	/* place-items: center; */
	background: var(--overlay);
}

header#header-landing > section::before {
	content: '';
	background: var(--overlay);
	position: absolute;
	inset: 0;
	translate: 0 100%;
}

header#header-landing > video {
	position: sticky;
	top: 0;
	height: var(--header-height);
	width: 100vw;
	object-fit: cover;
	background: canvas;
}

/* section:not(#reader) {
	min-height: 100vh;
	display: grid;
	place-items: center;
} */

.content {
	position: sticky;
	top: 0;
	min-height: 100vh;
	width: 100ch;
	padding: 2rem 0;
	max-width: calc(100% - 4rem);
	display: grid;
	place-items: center;
	margin: 0 auto;
	line-height: 1;
}

.content span {
	opacity: calc(var(--base) + (var(--active)));
	transition: opacity 0.5s;
}

.reader {
	--thick: 0px;
	outline: var(--thick) dashed var(--accent);
	outline-offset: calc(var(--thick) * -1);

	/* The trick here is that --ppc could be dynamic	*/
	height: calc(
		((var(--ppc) * var(--content-length) + (var(--pad) * var(--buffer))) * 1px) + 100vh
	);
}

/* :where(.x-link, .bear-link):is(:hover, :focus-visible) {
	opacity: 1;
}

.bear-link svg {
	opacity: 0.8;
	width: 75%;
} */

/* .sig path {
	--draw: 1.025;
	--end: 1.025;
	stroke-dasharray: var(--end);
	stroke-dashoffset: var(--draw);
}

.sig :is(.eye, .nose) {
	fill: transparent;
}

.sig {
	width: max(100px, 25vmin);
	color: canvasText;
	position: fixed;
	bottom: 4rem;
	right: 2rem;
	z-index: 10;
	translate: -20% -20%;
	rotate: -15deg;
	pointer-events: none;
} */

/* h2 span {
	color: var(--accent);
} */

@supports (animation-timeline: scroll()) {
	@property --active {
		inherits: true;
		initial-value: 0;
		syntax: '<number>';
	}

	.reader {
		view-timeline: --reader block;
	}

	.content span {
		animation: activate both steps(1);
		animation-timeline: --reader;
		animation-range: contain calc(((var(--start, 0) * var(--ppc)) * 1px))
			contain calc(((var(--end, 0) * var(--ppc)) * 1px));
	}

	@keyframes activate {
		to {
			--active: 1;
		}
	}

	header {
		animation: scale-down both ease-in;
		animation-timeline: view();
		animation-range: exit-crossing;
		view-timeline: --header;
	}

	@keyframes scale-down {
		to {
			scale: 0.8 0.8;
		}
	}
	#body-landing > section:last-of-type {
		view-timeline-name: --sign-off;
	}

	/* .sig path {
		animation: draw both linear;
		animation-timeline: --sign-off;
		animation-range: entry 20% entry 80%;
	}
	.sig :is(.eye, .nose) {
		animation: draw both linear, fill both linear;
		animation-timeline: --sign-off;
	}
	.sig :is(.ear, .eye) {
		animation-range: entry 30% entry 90%;
	}
	.sig .nose {
		animation-range: entry 40% entry 100%;
	} */
	@keyframes draw {
		to {
			stroke-dashoffset: 0;
		}
	}
	@keyframes fill {
		to {
			fill: currentColor;
		}
	}
}